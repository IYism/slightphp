#summary SCache 缓存插件（默认引擎memcache，另外还支持file,apc）

= 主要特性 =

 * 多memcache server支持
 * 支持server权重设置
 * memcache依赖key的设置(同时支持，完全匹配与部分匹配模式)
 * 优化的server分步算法，在增加memcache服务器组的时候，不会导致大部分cache过期
 
= 使用方法 =

{{{
//设置memcache服务器
SCache::init(array("host"=>"127.0.0.1","port"=>10006));
//增加
var_dump(SCache::set("name",new stdclass));
//增加，60秒后过期
var_dump(SCache::set("name2",60));
//读取
var_dump(SCache::get("name"));
//删除
var_dump(SCache::del("name"));
}}}

增加memcache服务器，可以是多个服务器。
{{{
SCache::addServer("10.10.221.12",10006);
SCache::addServer("10.10.221.12",11211);
SCache::addServer("10.10.221.12",10001);
}}}
增加几个key和value
{{{
SCache::set("key1","value1",10000);
SCache::set("key2","value2",10000);
SCache::set("key3","value3",10000);
SCache::set("key4","value4",10000);
SCache::set("key5","value5",10000);
SCache::set("key6","value6",10000);
SCache::set("key7","value7",10000);
}}}
获取几个简单key
{{{
SCache::get("key1");
SCache::get("key2");
}}}
删除key3的内容
{{{
SCache::del("key3");
}}}
获取key1,的内容，依赖key分别为key2,key3
{{{
//这里能取到内容value1
SCache::get("key1","key2");

//这里因为key3已经被删除，所以key1返回为空
SCache::get("key1","key3");
}}}

获取key1的内容，以来key都key2和key3
{{{
//用mode1完全依赖模式
//由于key3没有内容，所以key1返回为空
SCache::setMode(1);
SCache::get("key1",array("key2","key3"));

//用mode2部分依赖模式
//因为key2有内容，所以key1返回内容value1
SCache::setMode(2);
SCache::get("key1",array("key2","key3"));
}}}

= 什么是依赖Key =
比如，一个人生日等基本信息存在user里，这个人的对应的星座，年龄，属相等信息存在user_profile里，如果当这个人的生日修改后，他的user_profile很明显如果不更新，就会出现错误。于是就是
{{{
//user_profile是依赖user的值的，于是如下：
SCache::get("user_profile","user");
}}}
当user被删除，或者更新时，user_profile自动从memcached里过期了，于是达到了我们的目的。

= 关于mode =
mode现在有2种值，1，2.<br />
1.是完全匹配，列表模式必须用此模式
{{{
SCache::setMode(1);
}}}
所有依赖key必须有内容，并且$key->t 时间大于或等于所有$depKeys->t，才返回内容，否则为失败<br />
好处：完全依赖，内容能更准确<br />
坏处：如果依赖Key，一直不存在，有可能导致cache命中降低

2.是部分匹配，效率高
{{{
SCache::setMode(2);
}}}
只要$key有内容，如果$depKeys有内容且 $depKeys->t大于$key->t时，才失败，否则为成功<br />
好处：部分依赖，cache命中率高<br />
坏处：如果某些时候依赖Key只删除了，没有更新的话，会导致内容不太准确。

= 关于localCache =
是否在内存中暂时保存memcache中的值，优点是重复获取时速度会更快。
{{{
SCache::setLocalCache(boolean);
}}}

= 列表Key的解决办法 =
列表Key的问题，在用列表Key时，请把模式设置成完全匹配模式。
{{{
SCache::setMode(1);
}}}
这里要做的就是要先保存列表的key和depKeys，然后再取就OK了。

1.get时流程如下<br />
获取列表如P_1的内容，这里包含key(P_1),depKeys，然后再获取key,depKeys就OK了。<br />
2.set流程如下<br />
获取一组列表如1,2,3,4,5,6，然后生成P_1的key(P_1),depKeys（1，2，3，4，5，6），设置P_1


= 配置文件 =
 * 配置文件模板样例

{{{
;配置一共有4个字段，分别用","分割，用":"连接，如果有空格，空格不会被忽略

;host 主机IP，或者主机名
;port 端口号
;weight 权重，整数，默认为1
;timeout 连接超时设置，默认为1

;default 是默认的Cache配置

[default]
main1 = host:127.0.0.1,port:10006,weight:40,timeout:1,
main2 = host:127.0.0.1,port:11211,weight:60,timeout:2,
[video]
main1 = host:127.0.0.1,port:10006,weight:40,timeout:3,
main2 = host:127.0.0.1,port:11211,weight:60,timeout:4,

}}}

 * 实例

{{{
//设置配置文件地址
SCache::setConfigFile($filePath="cache.ini");
//多种获取方式
$config = SCache::getConfig("default");//这里会返回[default]配置
$config = SCache::getConfig("video");   //blog主库

SCache::addServers($config);


//SCache::addServer("10.10.221.12",10006,60);
//SCache::addServer("10.10.221.12",11211,40);
SCache::set("key1","value1",10000);
SCache::set("key2","value1",10000);
print_r(SCache::getServer("key1"));
print_r(SCache::getServer("key2"));
print_r(SCache::getServer("key3"));
print_r(SCache::getServer("key4"));
print_r(SCache::getServer("key5"));
print_r(SCache::getServer("key6"));
SCache::set("key2","value2",10000);
SCache::set("key3","value3",10000);
SCache::set("key4","value4",10000);
SCache::set("key5","value5",10000);
SCache::set("key6","value6",10000);
SCache::set("key7","value7",10000);
echo "key1:".(SCache::get("key1"))."\n";
echo "key2:".(SCache::get("key2"))."\n";
echo "delete key3\n";
SCache::del("key3");
//echo "key3:".(SCache::get("key3"))."\n";
//读取依赖key，如果key2,key3中没有值，那么key1就失败
echo "key1:".(SCache::get("key1",array("key2","key3"))).",depend by key2,key3\n";
//读取依赖key，如果key2没有值，那么key1就失败
echo "key1:".(SCache::get("key1","key2")).",depend by key2\n";
echo "key1:".(SCache::get("key1","key3")).",depend by key3\n";
echo "set localCache false\n";
SCache::setLocalCache(false);
echo "key1:".(SCache::get("key1",array("key2","key3"))).",depend by key2,key3\n";
//读取依赖key，如果key2,key3没有值，那么key1就失败
echo "set mode 2\n";
SCache::setMode(2);
echo "key1:".(SCache::get("key1",array("key2","key3"))).",depend by key2,key3\n";

}}}


= 其它apc,file操作类 =

{{{

/**
 * 文件cache例子 File Cache Samples
 */
$cache = SCache::getCacheEngine($cacheengine="File");
if(!$cache){
    die("File cache engine not exists");
}
/**
 * 初始参数，这里的dir为必要参数，depth表示目录深度
 */
$cache->init(array("dir"=>SlightPHP::$appDir."../cache","depth"=>3));
/**
 * 设置
 */
var_dump($cache->set("name",new stdclass));
/**
 * 获取
 */
var_dump($cache->get("name2"));
var_dump($cache->get("name"));
/**
 * 删除
 */
var_dump($cache->del("name"));

/**
 * APC Cache Samples
 */

$cache = SCache::getCacheEngine($cacheengine="APC");
if(!$cache){
    die("APC cache engine not exists");
}

var_dump($cache->set("name",new stdclass));
var_dump($cache->get("name2"));
var_dump($cache->get("name"));
var_dump($cache->del("name"));
}}}