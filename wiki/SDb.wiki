#labels Featured,database
#SDb 数据库插件-基本操作

= 主要特性 =

 * 支持多种数据底层驱动，如mysql,mysqli,pdo系列
 * 支持读写，主从分离
 * 支持ORM，与外键查询与更新
 * 简单高效，耦合性低，可以很方便移植


= 1.数据库连接与初始化 =
{{{
$db = new SDb();
$db->init(
  array("host"=>"localhost","user"=>"root","password"=>"","charset"=>"utf8","engine"=>"mysql")
);
}}}
 * charset 就是字符集，可以是utf8,gbk,gb2312等数据库支持的字符集
 * engine  是数据库驱动引擎，有这么多（ "mysql","mysqli","pdo_mysql","pdo_sqlite","pdo_cubrid","pdo_dblib","pdo_firebird","pdo_ibm","pdo_informix","pdo_sqlsrv","pdo_oci","pdo_odbc","pdo_pgsql","pdo_4d"），默认是用的"mysql"


= 2.数据查询 =
数据查询主要提供2种：
 * 1.是select，这是查询多条
{{{
DbObject select($table,$condition="",$item="",$groupby="",$orderby="",$leftjoin="");
}}}
参数：
    # $table 可以是array|string|object，如:
{{{
//字符串
$table="user";
$table="user as a,profile as b";
//数组
$table=array("user","user_profile");
//对像
$table=new stdclass;
$table->t1="user";
$table->ts="profile";
}}}
    # $conditon 检索条件，可以为3种格式：
{{{
//字符串
$condition="user_id=32";
//数组
$condition=array("user_id=32");
$condition=array("user_id>32","user_id<30");
$condition=array("user_id"=>32);
//对像
$condition=new stdclass;
$condition->user_id=32;
}}}
    # $item是要取回的字段名，默认是所有，可以为如下格式：
{{{
//字符串
$item="*";
$item="userid,username";
//数组
$item=array("*");
$item=array("userid","username");
$item=array("user.id","profile.profileid");
//对像
$item=new stdclass;
$item->item1 = "userid";
$item->item2 = "username";
}}}
    # $groupby 是要GROUP的要求，可以为如下格式:
{{{
//字符串
$groupby = "group by userid ";
$groupby = "group by userid,username";
}}}
    $ orderby 是要排序的字段，可以为如下格式:
{{{
//字符串
$orderby = "order by userid desc";
//数组
$orderby = array("userid"=>"desc","user_register_time"=>"asc");
//对像
$orderby = new stdclass;
$orderby->userid="desc";
$orderby->user_register_time="asc";
}}}
    $ leftjoin 是要LEFT JOIN的字段，可以为如下格式:
{{{
//数组
$orderby = array("key"=>"v","key2"=>"v2");
//对像
$leftjoin = new stdclass;
$leftjoin->key="v";
$leftjoin->key2="v2";
}}}
 * 2.是selectOne,这是查询一条
array selectOne($table,$condition="",$item="",$groupby="",$orderby="",$leftjoin="");

 * 3.实例
{{{
//取一个用户记录
$user = $db->selectOne("user",array("user_id"=>1));
//取10个
$db->setLimit(10);
//取第2页
$db->setPage(2);
//算出总数
$db->setCount(true);
$users= $db->select("user",array("userid>30");
}}}

= 数据更新 = 
 * update方法
{{{
boolean|int update($table,$condition="",$item="");
}}}
  # $table 与上面参数形式一样
  # $condition 修改的条件，和上面的一样
  # $item 要修改的字段，和上面的定义一样
 * 实例
{{{
//把用户ID为1的用户，更新nickname为xxxx
$db->update("user",array("id"=>1),array("nickname"=>"xxxx"));
//多表联合更新
$db->update(array("user","profile") , array("user.id"=>1,"user.id=profile.userid"),array("profile.comment"=>"我的注释"));
}}}

= 数据插入 =
 * insert 方法
{{{
int insert($table,$item="",$isreplace=false,$isdelayed=false,$update=array());
}}}
   # $table，要插入的表，和上面的定义一样
   # $item,要插入的字段，和上面的定义一样
   # $isreplace,碰到重复字段，是否用替换模式，用replace代替insert
   # $isdelayed，是否延迟插入
   # $update 和$item的格式一样，碰到重复时要更新字

 * 实例
{{{
//增加一个用户
$db->insert("user",array("username"=>"lili","password"=>"pjf(@EF"));
//增加一个用户，当重复时，更新其密码
$db->insert("user",array("username"=>"lili","password"=>"pjf(@EF"),true);
//增加一个用户，当重重复时，更新操作时间
$db->insert("user",array("username"=>"lili","password"=>"pjf(@EF"),false,false,array("logintime"=>time());
}}}


= 删除 =
{{{
boolean delete($table,$condition="");
}}}

= 执行原始SQL = 
{{{
int|boolean execute($sql);
}}}

= [SDbConfig SDb数据库配置文件]==
 * 配置文件模板样例
{{{
;配置一共有5个字段，分别用","分割，用":"连接，如果有空格，空格不会被忽略

;host 主机IP，或者主机名
;user 用户名
;database 数据库名
;password 密码
;charset  数据库字符集
;engine 数据库驱动引擎，如mysql,mysqli等，详见上面
;数据库配置有2种，一种是主库(main)，一种是查询库(query)
;你可以配置多个，按示例文件那样，多的就在后面加数字开始


;default 是默认的数据库配置，如果没有找到你获取的zone，比如要在这个文件里找SDb::getConfig("friends")，
;由于friends没有配置，就读取default里的
[default]
main    =   host:localhost1,user:root,database:db1,password:pw2,charset:utf8,engine:mysqli
main1   =   host:localhost2,user:root,database:db2,password:pw2,charset:latin1
query3  =   host:localhost3,user:root,database:db3,password:pw2

;这里配置了2个相同的main，后面的main会覆盖前面的，实际上只会获取到第二条
[user]
;这个会被忽略
main    =   host:localhost4,user:root,database:db1,password:pw2
;这个会覆盖上面的配置
main    =   host:localhost7,user:root,database:db1,password:pw2
main1   =   host:localhost5,user:root,database:db2,password:pw2
query3  =   host:localhost6,user:root,database:db3,password:pw2
;这里只配置了main，如果来获取query的话，会返回main的数据
;SDb::getConfig("blog","query")会和
;SDb::getConfig("blog"), SDb::getConfig("blog","main")
;一样的内容
[blog]
main    =   host:localhost4,user:root,database:db1,password:pw2

}}}
 * 实例
{{{
//设置配置文件地址
SDb::setConfigFile($filePath="ini.php");
//多种获取方式
$config = SDb::getConfig("friends");//这里会返回[default]配置
$config = SDb::getConfig("blog");   //blog主库
$config = SDb::getConfig("blog","main"); //blog主库
$config = SDb::getConfig("blog","query"); //由于没有配置从库，所以返回主库
$db = new SDb;
//结合SDb，初始化数据库
$db->init($config);
}}}


= 其它技巧=
 * 分页
{{{
setLimit($limit);
setPage($page);
setCount($count)
}}}

 * 调试与SQL显示
{{{
//只要在代码执行前加上
define("DEBUG",true);
}}}
 * 其它
{{{
setOrderby($orderby);
setGroupby($groupby);
}}}


= [ORM ORM 操作技巧]=

= [ORM ORM 外键操作]=